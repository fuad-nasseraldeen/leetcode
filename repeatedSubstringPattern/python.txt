#https://leetcode.com/problems/repeated-substring-pattern/submissions/

class Solution:
    def repeatedSubstringPattern(self, s: str) -> bool:
#the length of the substring has to be a divsor
#of the original string

    #start at the half way mark and see if i to the 
    #half way mark matches the rest of the string
    
        length = len(s)

        for i in range(length//2 , 0, -1):   
            if(length % i == 0):
                string = s[:i]
                times = length//i
                ns = ""
                for j in range(0,times):
                    ns+=string
                if(ns == s):
                    return True
        return False

'''

In order to obtain our solution, what we first have to realize is that our substring length HAS to be easily divisible by the original string length. What this means is that our substring has to be a length that is a multiple of the original sting length (i.e. original string length = 9, which means our substring length has to be of length 3 (since 3 is the only divisible number by 9 --another example -- original string length = 4, substring length has to be 2)

The easiest way to obtain a divsor of the original string is to start at the half way point. Why we start at the half way point is because we will build our substring starting at index 0, to the halfway point and compare this with the rest of the string. We decrement by -1 in the case where the halfway point is NOT divisble by the original string length (i.e. string length = 9, half = 4 which is not a divisor of 9, decrement by -1 to get 3 which will be the length of the substring)

"string = s[:i]" will build our substring to match on the rest of the original string. We need to know how many times to mutiply this substring in order to get the length of our original string (so we can compare them) so we divide the length of our original string by the length of our substring to get the number of times we need to "clone" our string. This is what the second for loop is for.

After the second for loop, we should have a new substring that is of length of the original string. We now compare this substring to see if it matches the original string. If it does, then 

       
        short = ''
        for i in range(1,len(s)):
            for j in range(i+1,len(s)):
                if s[i:j] in s[j:]:
                    return True
       
   
                
                
        for k in range(1, len(s)//2 +1):   
            if s == s[k:] + s[:k]:
                return True
        return False
        '''