class Solution: # time complexity is o(n**3)
    def longestPalindrome(self, s: str) -> str:
        m = ''  # Memory to remember a palindrome
        if len(s) == 1:
            return s
        for i in range(len(s)):  # i = start, O = n
            for j in range(len(s), i, -1):  # j = end, O = n^2
                if len(m) >= j-i:  # To reduce time
                    break
                elif s[i:j] == s[i:j][::-1]:
                    m = s[i:j]
                    break
        return m     
        
        
'''
###########################################
        def is_palindrome(subs):
            rev = subs[::-1]
            print(subs, rev)
            return subs == rev
############################################






        max_palindrome = 0
        sub_palindrome = ''
        for L in range(len(s)):
            for R in range(L,len(s)):
                length = R-L+1 #s[L:R-L+1]
                subs = s[L:length]
                print('l={} , r={} , length= {} , s[L:length] = {} '.format(L,R,length,subs))
                if length > max_palindrome:    
                    if is_palindrome(subs):
                        max_palindrome = length
                        sub_palindrome = subs
        return sub_palindrome



'''
